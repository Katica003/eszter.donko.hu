---
import background from '@/assets/room/background.png'
import boots from '@/assets/room/boots.png'
import folder from '@/assets/room/folder.png'
import frame from '@/assets/room/frame.png'
import laptop from '@/assets/room/laptop.png'
import phone from '@/assets/room/phone.png'
import sewing from '@/assets/room/sewing.png'
---

<div id="room">
  <!-- <div id="output">output</div> -->
  <a id="boots" class="extra" href="kitekintes"><img src={boots.src} /></a>
  <a id="folder" class="extra" href="tervek"><img src={folder.src} /></a>
  <a id="frame" class="extra" href="/tanulmanyok#elismeresek">
    <img src={frame.src} />
  </a>
  <a id="laptop" class="extra" href="tanulmanyok"><img src={laptop.src} /></a>
  <a id="phone" class="extra" href="kapcsolat"><img src={phone.src} /></a>
  <a id="sewing" class="extra" href="bemutatkozas"><img src={sewing.src} /></a>
</div>

<script define:vars={{ background }}>
  class SensorInputSmoother {
    #size = undefined
    #data = undefined
    #output = undefined

    constructor(size, output) {
      this.#size = size
      this.#data = []
      this.#output = output
    }

    input = (n) => {
      this.#data.push(n)

      if (this.#data.length > this.#size) {
        this.#output(this.#data.reduce((a, b) => a + b) / this.#data.length)
        this.#data.shift()
      }
    }
  }

  const ORIENTATION_RANGE = 45
  const ORIENTATION_SMOOTHING = 25
  const IMAGE_SIZE = { WIDTH: background.width, HEIGHT: background.height }

  new (class {
    isOrientationBased = false
    // gammaBounds = {
    //   min: Number.POSITIVE_INFINITY,
    //   max: Number.NEGATIVE_INFINITY,
    // }
    gammaBounds = undefined

    refresh = () => {
      this.bcr = this.room.getBoundingClientRect()
      this.scale = Math.max(
        this.bcr.width / IMAGE_SIZE.WIDTH,
        this.bcr.height / IMAGE_SIZE.HEIGHT,
      )

      this.xExtra = this.scale * IMAGE_SIZE.WIDTH - this.bcr.width
      this.yExtra = this.scale * IMAGE_SIZE.HEIGHT - this.bcr.height

      this.room.style.setProperty('--scale', this.scale)
    }

    updatePosition = (xPos, yPos) => {
      this.room.style.backgroundPosition = `${xPos * 100}% ${yPos * 100}%`

      this.room.style.setProperty('--offset-x', -xPos * this.xExtra)
      this.room.style.setProperty('--offset-y', -yPos * this.yExtra)
    }

    constructor() {
      this.room = document.getElementById('room')
      this.refresh()

      this.room.addEventListener('mousemove', (e) => {
        if (this.isOrientationBased) {
          return
        }
        this.updatePosition(
          (e.clientX - this.bcr.x) / this.bcr.width,
          (e.clientY - this.bcr.y) / this.bcr.height,
        )
      })


      const sis = new SensorInputSmoother(ORIENTATION_SMOOTHING, (value) => {
        if (this.gammaBounds === undefined) {
          this.gammaBounds = {
            min: value - ORIENTATION_RANGE / 2,
            max: value + ORIENTATION_RANGE / 2,
          }
        }

        if (value < this.gammaBounds.min) {
          this.gammaBounds.min = value
          this.gammaBounds.max = this.gammaBounds.min + ORIENTATION_RANGE
        }

        if (value > this.gammaBounds.max) {
          this.gammaBounds.max = value
          this.gammaBounds.min = this.gammaBounds.max - ORIENTATION_RANGE
        }

        const hp = (this.gammaBounds.max - value) / ORIENTATION_RANGE
        const vp = (value - this.gammaBounds.min) / ORIENTATION_RANGE

        this.updatePosition(hp, vp)
      })

      window.addEventListener('deviceorientation', (e) => {
        if (e.gamma === null) {
          return
        }
        this.isOrientationBased = true

        sis.input(e.gamma)
      })

      window.addEventListener('resize', this.refresh)
    }
  })()
</script>

<style define:vars={{ ['background-src']: `url("${background.src}")` }}>
  #room {
    width: 100%;
    height: 100%;
    background-image: var(--background-src);
    background-size: cover;

    position: relative;

    overflow: hidden;
    opacity: 0;

    animation: 1s fade-in 0.1s forwards;
  }

  .extra {
    position: absolute;
    top: calc(var(--scale) * var(--placement-y));
    left: calc(var(--scale) * var(--placement-x));
    transform-origin: 0% 0%;
    scale: var(--scale);
    translate: calc(var(--offset-x) * 1px) calc(var(--offset-y) * 1px);
  }

  /* prettier-ignore */
  @media {
    #boots  { --placement-x: 155px;  --placement-y: 1300px; }
    #folder { --placement-x: 1015px; --placement-y: 940px;  }
    #frame  { --placement-x: 580px;  --placement-y: 55px;   }
    #laptop { --placement-x: 950px;  --placement-y: 610px;  }
    #phone  { --placement-x: 1265px; --placement-y: 1400px; }
    #sewing { --placement-x: 1975px; --placement-y: 550px;  }
  }

  .extra {
    animation: 3s ease-in-out 1s infinite alternate shine;
  }

  .extra:hover {
    animation: unset;
  }

  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes shine {
    from {
      filter: brightness(100%);
    }
    to {
      filter: brightness(150%);
    }
  }

  .extra img {
    transition: scale 0.25s;
  }

  .extra img:hover {
    scale: 110%;
  }
</style>
