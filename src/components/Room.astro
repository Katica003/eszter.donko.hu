---
import background from '@/assets/room/background.png'
import boots from '@/assets/room/boots.png'
import folder from '@/assets/room/folder.png'
import frame from '@/assets/room/frame.png'
import laptop from '@/assets/room/laptop.png'
import phone from '@/assets/room/phone.png'
import sewing from '@/assets/room/sewing.png'
---

<div id="room">
  <!-- <div id="output">output</div> -->
  <a id="boots" class="extra" href="kitekintes"><img src={boots.src} /></a>
  <a id="folder" class="extra" href="tervek"><img src={folder.src} /></a>
  <a id="frame" class="extra" href="bemutatkozas"><img src={frame.src} /></a>
  <a id="laptop" class="extra" href="tanulmanyok"><img src={laptop.src} /></a>
  <a id="phone" class="extra" href="kapcsolat"><img src={phone.src} /></a>
  <a id="sewing" class="extra" href="kitekintes"><img src={sewing.src} /></a>
</div>

<script define:vars={{ background }}>
  const ORIENTATION_RANGE = 45
  const IMAGE_SIZE = { WIDTH: background.width, HEIGHT: background.height }

  new (class {
    isOrientationBased = false
    // gammaBounds = {
    //   min: Number.POSITIVE_INFINITY,
    //   max: Number.NEGATIVE_INFINITY,
    // }
    gammaBounds = undefined

    refresh = () => {
      this.bcr = this.room.getBoundingClientRect()
      this.scale = Math.max(
        this.bcr.width / IMAGE_SIZE.WIDTH,
        this.bcr.height / IMAGE_SIZE.HEIGHT,
      )

      this.xExtra = this.scale * IMAGE_SIZE.WIDTH - this.bcr.width
      this.yExtra = this.scale * IMAGE_SIZE.HEIGHT - this.bcr.height

      this.room.style.setProperty('--scale', this.scale)
    }

    updatePosition = (xPos, yPos) => {
      this.room.style.backgroundPosition = `${xPos * 100}% ${yPos * 100}%`

      this.room.style.setProperty('--offset-x', -xPos * this.xExtra)
      this.room.style.setProperty('--offset-y', -yPos * this.yExtra)
    }

    constructor() {
      this.room = document.getElementById('room')
      this.refresh()

      this.room.addEventListener('mousemove', (e) => {
        if (this.isOrientationBased) {
          return
        }
        this.updatePosition(
          (e.clientX - this.bcr.x) / this.bcr.width,
          (e.clientY - this.bcr.y) / this.bcr.height,
        )
      })

      window.addEventListener('deviceorientation', (e) => {
        if (e.gamma === null) {
          return
        }
        this.isOrientationBased = true

        if (this.gammaBounds === undefined) {
          this.gammaBounds = {
            min: e.gamma - ORIENTATION_RANGE / 2,
            max: e.gamma + ORIENTATION_RANGE / 2,
          }
        }

        if (e.gamma < this.gammaBounds.min) {
          this.gammaBounds.min = e.gamma
          this.gammaBounds.max = this.gammaBounds.min + ORIENTATION_RANGE
        }

        if (e.gamma > this.gammaBounds.max) {
          this.gammaBounds.max = e.gamma
          this.gammaBounds.min = this.gammaBounds.max - ORIENTATION_RANGE
        }

        const hp = (this.gammaBounds.max - e.gamma) / ORIENTATION_RANGE
        const vp = (e.gamma - this.gammaBounds.min) / ORIENTATION_RANGE

        this.updatePosition(hp, vp)
      })

      window.addEventListener('resize', this.refresh)
    }
  })()
</script>

<style define:vars={{ ['background-src']: `url("${background.src}")` }}>
  #room {
    width: 100%;
    height: 100%;
    background-image: var(--background-src);
    background-size: cover;

    position: relative;

    overflow: hidden;
    opacity: 0;

    animation: 1s fade-in 0.1s forwards;
  }

  .extra {
    position: absolute;
    transform-origin: 0% 0%;
    scale: var(--scale);
    translate: calc(var(--offset-x) * 1px) calc(var(--offset-y) * 1px);
  }

  #boots {
    top: calc(var(--scale) * 1300px);
    left: calc(var(--scale) * 155px);
  }

  #folder {
    top: calc(var(--scale) * 940px);
    left: calc(var(--scale) * 1015px);
  }

  #frame {
    top: calc(var(--scale) * 55px);
    left: calc(var(--scale) * 580px);
  }

  #laptop {
    top: calc(var(--scale) * 610px);
    left: calc(var(--scale) * 950px);
  }

  #phone {
    top: calc(var(--scale) * 1400px);
    left: calc(var(--scale) * 1265px);
  }

  #sewing {
    top: calc(var(--scale) * 550px);
    left: calc(var(--scale) * 1975px);
  }

  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .extra img {
    transition: scale 0.25s;
  }

  .extra img:hover {
    scale: 110%;
  }
</style>
